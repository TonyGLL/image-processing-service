// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: files.sql

package db

import (
	"context"
	"time"
)

const createImage = `-- name: CreateImage :one
INSERT INTO image_processing_schema.images (url) VALUES($1) RETURNING id
`

func (q *Queries) CreateImage(ctx context.Context, url string) (int32, error) {
	row := q.queryRow(ctx, q.createImageStmt, createImage, url)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const createImageOptions = `-- name: CreateImageOptions :exec
INSERT INTO 
image_processing_schema.images_options (
    resize_width,
    resize_height,
    crop_width,
    crop_height,
    crop_x,
    crop_y,
    rotate,
    format,
    grayscale,
    sepia,
    image_id
) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
`

type CreateImageOptionsParams struct {
	ResizeWidth  int32  `json:"resize_width"`
	ResizeHeight int32  `json:"resize_height"`
	CropWidth    int32  `json:"crop_width"`
	CropHeight   int32  `json:"crop_height"`
	CropX        int32  `json:"crop_x"`
	CropY        int32  `json:"crop_y"`
	Rotate       int32  `json:"rotate"`
	Format       string `json:"format"`
	Grayscale    bool   `json:"grayscale"`
	Sepia        bool   `json:"sepia"`
	ImageID      int32  `json:"image_id"`
}

func (q *Queries) CreateImageOptions(ctx context.Context, arg CreateImageOptionsParams) error {
	_, err := q.exec(ctx, q.createImageOptionsStmt, createImageOptions,
		arg.ResizeWidth,
		arg.ResizeHeight,
		arg.CropWidth,
		arg.CropHeight,
		arg.CropX,
		arg.CropY,
		arg.Rotate,
		arg.Format,
		arg.Grayscale,
		arg.Sepia,
		arg.ImageID,
	)
	return err
}

const getAllImages = `-- name: GetAllImages :many
SELECT i.id, i.url, i.created_at, i.updated_at, io.id, io.resize_width, io.resize_height, io.crop_width, io.crop_height, io.crop_x, io.crop_y, io.rotate, io.format, io.grayscale, io.sepia, io.image_id FROM image_processing_schema.images i INNER JOIN image_processing_schema.images_options io ON io.image_id = i.id ORDER BY i.id OFFSET $1 LIMIT $2
`

type GetAllImagesParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

type GetAllImagesRow struct {
	ID           int32     `json:"id"`
	Url          string    `json:"url"`
	CreatedAt    time.Time `json:"created_at"`
	UpdatedAt    time.Time `json:"updated_at"`
	ID_2         int32     `json:"id_2"`
	ResizeWidth  int32     `json:"resize_width"`
	ResizeHeight int32     `json:"resize_height"`
	CropWidth    int32     `json:"crop_width"`
	CropHeight   int32     `json:"crop_height"`
	CropX        int32     `json:"crop_x"`
	CropY        int32     `json:"crop_y"`
	Rotate       int32     `json:"rotate"`
	Format       string    `json:"format"`
	Grayscale    bool      `json:"grayscale"`
	Sepia        bool      `json:"sepia"`
	ImageID      int32     `json:"image_id"`
}

func (q *Queries) GetAllImages(ctx context.Context, arg GetAllImagesParams) ([]GetAllImagesRow, error) {
	rows, err := q.query(ctx, q.getAllImagesStmt, getAllImages, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllImagesRow
	for rows.Next() {
		var i GetAllImagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ID_2,
			&i.ResizeWidth,
			&i.ResizeHeight,
			&i.CropWidth,
			&i.CropHeight,
			&i.CropX,
			&i.CropY,
			&i.Rotate,
			&i.Format,
			&i.Grayscale,
			&i.Sepia,
			&i.ImageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

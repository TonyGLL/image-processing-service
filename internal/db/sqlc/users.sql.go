// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
)

const createPassword = `-- name: CreatePassword :exec
INSERT INTO image_processing_schema.passwords (value, user_id) VALUES ($1, $2)
`

type CreatePasswordParams struct {
	Value  string `json:"value"`
	UserID int32  `json:"user_id"`
}

func (q *Queries) CreatePassword(ctx context.Context, arg CreatePasswordParams) error {
	_, err := q.exec(ctx, q.createPasswordStmt, createPassword, arg.Value, arg.UserID)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO image_processing_schema.users (username) VALUES($1) RETURNING id
`

func (q *Queries) CreateUser(ctx context.Context, username string) (int32, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser, username)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username FROM image_processing_schema.users WHERE username = $1
`

type GetUserByUsernameRow struct {
	ID       int32  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (GetUserByUsernameRow, error) {
	row := q.queryRow(ctx, q.getUserByUsernameStmt, getUserByUsername, username)
	var i GetUserByUsernameRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}
